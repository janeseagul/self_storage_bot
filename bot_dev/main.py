import asyncio
import os
from datetime import datetime, timedelta, time

import aioschedule
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ContentTypes, callback_query
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from keyboard import *
from keyboard_admin import *
import logging

load_dotenv()
tg_token = os.getenv('TG_BOT_TOKEN')
admintg_id = os.getenv('ADMIN_ID')
bot = Bot(token=tg_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
logging.basicConfig(level=logging.INFO)


class D(StatesGroup):
    contact = State()
    accept = State()
    storage = State()
    reminder = State()


async def on_startup(_):
    pass


@dp.callback_query_handler(text=['admin', 'user'])
async def get_role(call: types.CallbackQuery):
    if call.data == 'user':
        await call.message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {call.from_user.first_name} –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:', reply_markup=kb1())
    elif call.data == 'admin':
        await call.message.answer('–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:', reply_markup=kb_admin_1())


@dp.callback_query_handler(text=['no_time', 'active', 'ad', 'full_boxes'])
async def admin_pannel(call: types.CallbackQuery):
    if call.data == 'no_time':
        await call.message.answer('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–æ–∫—Å—ã:', reply_markup=kb_admin_2())
    elif call.data == 'active':
        await call.message.answer('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', reply_markup=kb_admin_3())
    elif call.data == 'ad':
        await call.message.answer('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', reply_markup=kb_adm_back())
    elif call.data == 'full_boxes':
        await call.message.answer('–ó–∞–Ω—è—Ç—ã–µ –±–æ–∫—Å—ã:', reply_markup=kb_admin_4())


@dp.callback_query_handler(text='take_order')
async def accept_orders_w(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –≤–µ—â–µ–π:', reply_markup=choose_weight_adm())


@dp.callback_query_handler(text=['10', '10-20', '4-7', '7-10', '100'])
async def accept_orders_h(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤–µ—â–µ–π', reply_markup=choose_height_adm())


@dp.callback_query_handler(text=['less_3', '3-7', '7-10'])
async def accept_order(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è', reply_markup=choose_order_date())


@dp.callback_query_handler(text=['month', 'sixmonth', 'year', 'diff'])
async def choose_storage_date_admin(call: types.CallbackQuery):
    await call.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:', reply_markup=accept_orde())
    await D.accept.set()


@dp.callback_query_handler(state=D.accept)
async def adm_finish(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.', reply_markup=kb_admin_1())
    await state.finish()


@dp.callback_query_handler(text='adm_menu')
async def back_to_adm_menu(call: types.CallbackQuery):
    await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb_admin_1())


@dp.callback_query_handler(text='storage_list')
async def u_send_good_list(call: types.CallbackQuery):
    good_list = """–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ:                                                                                                                              
‚úÖ –ú–µ–±–µ–ª—å                             
‚úÖ –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞                 
‚úÖ –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å                      
‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
‚úÖ –ü–æ—Å—É–¥–∞
‚úÖ –ö–Ω–∏–≥–∏
‚úÖ –®–∏–Ω—ã
‚úÖ –í–µ–ª–æ—Å–∏–ø–µ–¥—ã
‚úÖ –ú–æ—Ç–æ—Ü–∏–∫–ª—ã –∏ —Å–∫—É—Ç–µ—Ä—ã
‚úÖ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
–ß—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ:
‚ùå –ê–ª–∫–æ–≥–æ–ª—å
‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã
‚ùå –î–µ–Ω—å–≥–∏ –∏ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏
‚ùå –ò–∑–¥–µ–ª–∏—è –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞
‚ùå –ñ–∏–≤—ã–µ —Ü–≤–µ—Ç—ã –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚ùå –î–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã
‚ùå –û—Ä—É–∂–∏–µ –∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã
‚ùå –í–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏ —Ç–æ–∫—Å–∏–Ω—ã
‚ùå –õ–∞–∫–∏ –∏ –∫—Ä–∞—Å–∫–∏ –≤ –Ω–µ–≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ–π —Ç–∞—Ä–µ
‚ùå –õ—é–±–æ–π –º—É—Å–æ—Ä –∏ –æ—Ç—Ö–æ–¥—ã
    """
    await call.message.answer(good_list, reply_markup=kb6())


@dp.callback_query_handler(text='support')
async def u_to_support(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb2())


@dp.callback_query_handler(text='faq')
async def u_send_faq(call: types.CallbackQuery):
    faq = """
1. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞.
2. –ú—ã —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ, –∏—Å—Ö–æ–¥—è –∏–∑ –æ–±—ä–µ–º–∞ –≤–µ—â–µ–π.
3. –í —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∫ –≤–∞–º –ø—Ä–∏–µ–¥–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –º—É–≤–µ—Ä–æ–≤, —É–ø–∞–∫—É–µ—Ç –≤–µ—â–∏, –≤—ã–Ω–µ—Å–µ—Ç –∏ –æ—Ç–≤–µ–∑—ë—Ç –∏—Ö –Ω–∞ —Å–∫–ª–∞–¥ –∏–ª–∏ –Ω–∞ –≤–∞—à–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.
4. –ö–æ–≥–¥–∞ –∫–∞–∫–∞—è-—Ç–æ –≤–µ—â—å —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –∑–∞–∫–∞–∂–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç, –∏ –º—ã –ø—Ä–∏–≤–µ–∑–µ–º –µ—ë –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –ú–æ—Å–∫–≤—ã.
5. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, \
—á—Ç–æ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–æ—Ç –æ–±—ä–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–Ω–∏–º–∞—é—Ç –≤–∞—à–∏ –≤–µ—â–∏, –∞ –Ω–µ –∑–∞ –≤–µ—Å—å –æ–±—ä–µ–º –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è.
6. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥—É –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞—à–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–ø–∞–∫–æ–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. \
–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –º—É–≤–µ—Ä–æ–≤ —Å–æ–±–µ—Ä–µ—Ç, —É–ø–∞–∫—É–µ—Ç –∏ –º–∞—Ä–∫–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—à–∏ –≤–µ—â–∏, –∞ –∑–∞—Ç–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥. \
–í—Å–µ –≤–µ—â–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–ª–ª–µ—Ç–∞—Ö –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. \
–ù–∞—à —Å–∫–ª–∞–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞–º–∏ –±–µ–∑ —Å–ª–µ–ø—ã—Ö –∑–æ–Ω, –∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
7. –í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –≤–µ—â–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. \
–¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤–µ—â–µ–π –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–µ—â–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è. \
–í—Å–µ –≤–∞—à–∏ –≤–µ—â–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    """
    await call.message.answer(faq, reply_markup=kb5())


@dp.callback_query_handler(text='my_boxes')
async def u_get_user_boxes(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=boxes_main())


@dp.callback_query_handler(text=['box1', 'furniture'])
async def u_get_boxes_back(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø—Ü–∏—é:', reply_markup=boxes2())


@dp.callback_query_handler(text=['get_back_main', 'get_back'])
async def u_get_boxes_back(call: types.CallbackQuery):
    if call.data == 'get_back_main':
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=kb3())
    elif call.data == 'get_back':
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤–µ—â–∏:', reply_markup=boxes_main())


@dp.callback_query_handler(text='back_to_menu')
async def u_back_to_menu(call: types.CallbackQuery):
    await call.message.answer(text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', reply_markup=kb1())


@dp.callback_query_handler(text='application')
async def u_leave_a_request(call: types.CallbackQuery):
    await call.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', reply_markup=data_processing())


@dp.callback_query_handler(text=['ten', 'ten_twenty', '40_70', '70-100', 'more100', 'idk'])
async def u_choose_w(call: types.CallbackQuery):
    if call.data == 'idk':
        await call.message.answer("""–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Å –≤–∞—à–∏—Ö –≤–µ—â–µ–π.
–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤–∞—à–∏—Ö –≤–µ—â–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞. –ú—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞—Å—Å—á–µ—Ç–æ–º!""", reply_markup=choose_height())
    else:
        await call.message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤–∞—à–∏—Ö –≤–µ—â–µ–π:', reply_markup=choose_height())


@dp.callback_query_handler(text='idkh')
async def u_help_w_height(call: types.CallbackQuery):
    await call.message.answer("–ö–æ–Ω–µ—á–Ω–æ, –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã—Å–æ—Ç—É –≤–∞—à–∏—Ö –≤–µ—â–µ–π. –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—â–∏?",
                              reply_markup=choose_data())


@dp.callback_query_handler(text=['less3', '3-7m', '7-10m'])
async def u_choose_h(call: types.CallbackQuery):
    await call.message.answer("""–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—â–∏? –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏—Å—Ö–æ–¥—è \
–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—ä–µ–º–∞ –≤–µ—â–µ–π üëá""", reply_markup=choose_data())


@dp.callback_query_handler(text=['1', '6', '1y', 'other'])
async def choose_storage_data(call: types.CallbackQuery, state: FSMContext):
    current_time = datetime.now()
    if call.data == '1':
        finished_at = current_time.date() + timedelta(days=30)
        await state.update_data(finished_at=finished_at)
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
                                  reply_markup=choose_del())
        return finished_at
    elif call.data == '6':
        finished_at = current_time.date() + timedelta(days=182)
        await state.update_data(finished_at=finished_at)
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
                                  reply_markup=choose_del())
        return finished_at
    elif call.data == '1y':
        finished_at = current_time.date() + timedelta(days=365)
        await state.update_data(finished_at=finished_at)
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
                                  reply_markup=choose_del())
        return finished_at
    elif call.data == 'other':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì–ì, –ú–ú, –î–î"')


@dp.callback_query_handler(text='letter_to_sup')
async def u_send_letter_to_sup(call: types.CallbackQuery):
    await call.message.answer("""–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
storagebot@gmail.com
+79215897941""")
    await asyncio.sleep(1)
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá:', reply_markup=kb6())


@dp.callback_query_handler(text=['yes', 'no'])
async def u_person_data_processing(call: types.CallbackQuery):
    if call.data == 'yes':
        await D.contact.set()
        await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                  reply_markup=contact())
        await asyncio.sleep(1)
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —É–ª. –Æ–∂–Ω–∞—è, –¥. 13, –∫–≤. 7')
    if call.data == 'no':
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá:', reply_markup=kb2())


@dp.callback_query_handler(text='ok')
async def confirm_order(call: types.CallbackQuery):
    await call.message.answer("""–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!
–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞""", reply_markup=kb2())


@dp.message_handler(state=D.contact)
async def u_make_application(msg: types.Message, state: FSMContext, content_types=ContentTypes.CONTACT):
    await state.get_data()
    await state.update_data(address=msg.text)
    await msg.answer('–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –≤–∞—à–∏—Ö –≤–µ—â–µ–π üëá:',
                     reply_markup=choose_weight())
    await state.finish()


@dp.message_handler(state=D.storage)
async def get_order_date(msg: types.Message, state: FSMContext):
    await msg.answer('–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=choose_del())
    await state.finish()


@dp.callback_query_handler(text=['runner', 'myself', 'by_runner', 'by_myself'])
async def u_delivery(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    if call.data == 'runner':
        await bot.send_message(chat_id, text="""–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—å–µ—Ä—Å–∫—É—é –¥–æ—Å—Ç–∞–≤–∫—É!
–ú—É–≤–µ—Ä—ã –ø—Ä–∏–µ–¥—É—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É, —á—Ç–æ–±—ã –∏–∑–º–µ—Ä–∏—Ç—å, —É–ø–∞–∫–æ–≤–∞—Ç—å –∏ –∑–∞–±—Ä–∞—Ç—å –≤–∞—à–∏ –≤–µ—â–∏ –Ω–∞ —Å–∫–ª–∞–¥""", reply_markup=kb7())
    elif call.data == 'myself':
        await bot.send_message(chat_id, text='–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: –Æ–±–∏–ª–µ–π–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 17–∫1', reply_markup=kb7())
    elif call.data == 'by_runner':
        await bot.send_message(chat_id, text="""–ö—É—Ä—å–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.
–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∫–∞–∂–∏—Ç–µ –∫—É—Ä—å–µ—Ä—É —ç—Ç–æ—Ç QR-–∫–æ–¥.""", reply_markup=back())
    elif call.data == 'by_myself':
        await bot.send_message(chat_id, text="""–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–∏ –≤–µ—â–∏ –ø–æ –∞–¥—Ä–µ—Å—É: –Æ–±–∏–ª–µ–π–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 17–∫1
QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:""", reply_markup=back())


@dp.message_handler(commands=['start'])
async def u_start(msg: types.Message):
    text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–ú—ã –∫–æ–º–ø–∞–Ω–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –º–∞–ª–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.
–ù–∞–ø—Ä–∏–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã, –∫–∞—è–∫–∏, c–Ω–µ–≥–æ—Ö–æ–¥—ã. 
–ú—ã –∑–∞–±–µ—Ä—ë–º –≤–∞—à–∏ –≤–µ—â–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥, —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø—Ä–∏–≤–µ–∑—ë–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –ú–æ—Å–∫–≤—ã.
–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá
        """
    await msg.answer(text, reply_markup=choose_role())


@dp.message_handler()
async def month_reminder(msg: types.Message):
    chat_id = msg.from_user.id
    text = '–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ –ë–æ–∫—Å–µ 1 –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π'
    await bot.send_message(chat_id, text)


@dp.message_handler()
async def two_weeks_reminder(msg: types.Message):
    chat_id = msg.from_user.id
    await bot.send_message(chat_id, text='–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ –ë–æ–∫—Å–µ 1 –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π')


@dp.message_handler()
async def week_reminder(msg: types.Message):
    chat_id = msg.from_user.id
    await bot.send_message(text='–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ –ë–æ–∫—Å–µ 1 –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π')


@dp.message_handler()
async def three_day_reminder(msg: types.Message):
    chat_id = msg.from_user.id
    await bot.send_message(text='–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ –ë–æ–∫—Å–µ 1 –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è')


@dp.message_handler()
async def arrears_reminder(msg: types.Message):
    chat_id = msg.from_user.id
    await bot.send_message(text=""" –í–Ω–∏–º–∞–Ω–∏–µ. –ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –≤–µ—â–µ–π. 
–í–µ—â–∏ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –µ—â–µ 6 –º–µ—Å—è—Ü–µ–≤ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É. 
–ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 6 –º–µ—Å—è—Ü–µ–≤ –≤—ã –∏—Ö –Ω–µ –∑–∞–±–µ—Ä–µ—Ç–µ - –≤–µ—â–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.""")


@dp.message_handler()
async def arrears_month_reminder(msg: types.Message):
    chat_id = msg.from_user.id
    await bot.send_message(chat_id, text='–ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π –≤ —è—á–µ–π–∫–µ.')


async def main(state: FSMContext):
    data = await state.get_data()
    finished_at = data['finished_at']
    while datetime.now() >= finished_at:
        scheduler.add_job(month_reminder, trigger='date', run_date=datetime.now() + timedelta(days=30), args=(bot,))
        scheduler.add_job(two_weeks_reminder, trigger='date', run_date=datetime.now() + timedelta(days=14), args=(bot,))
        scheduler.add_job(week_reminder, trigger='date', run_date=datetime.now() + timedelta(days=7), args=(bot,))
        scheduler.add_job(three_day_reminder, trigger='date', run_date=datetime.now() + timedelta(days=3), args=(bot,))
    if datetime.now() - finished_at == 0:
        scheduler.add_job(arrears_month_reminder, 'interval', day=30)
        scheduler.add_job(arrears_reminder, trigger='date', run_date=datetime.now() - finished_at, args=(bot,))


if '__main__' == __name__:
    scheduler.start()
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
